{"version":3,"sources":["serviceWorker.js","Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundry.js","Containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","id","className","alt","src","CardList","robots","cardArray","map","user","index","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","React","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filterRobots","filter","robot","toLowerCase","includes","length","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6CCUSC,EApBF,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,KAAKC,EAAe,EAAfA,MAAMC,EAAS,EAATA,GAGrB,OAEE,yBAAKC,UAAU,wDAGX,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,6BAGA,4BAAKF,GACL,2BAAIC,MCMDK,EArBA,SAAC,GAAY,IAAXC,EAAU,EAAVA,OAGPC,EAAUD,EAAOE,KAAI,SAACC,EAAKC,GAE/B,OACG,kBAAC,EAAD,CACGC,IAAKD,EACLT,GAAIK,EAAOI,GAAOT,GAClBF,KAAMO,EAAOI,GAAOX,KACpBC,MAAOM,EAAOI,GAAOV,WAI7B,OACI,6BACKO,ICFEK,EAjBC,SAAC,GAA8B,EAA7BC,YAA8B,IAAjBC,EAAgB,EAAhBA,aAC3B,OACC,yBAAKZ,UAAU,OAEb,2BACEA,UAAU,oCACVa,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCEJI,G,MAXF,SAACC,GAEV,OAGG,yBAAKC,MAAO,CAACC,UAAU,SAAUC,OAAO,kBAAkBC,OAAO,UAC5DJ,EAAMK,YCwBHC,E,YAzBX,WAAYN,GAAO,IAAD,8BACd,4CAAMA,KAEDO,MAAM,CACVC,UAAS,GAJI,E,+EASAC,EAAOC,GACxBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAKrB,OAAGG,KAAKJ,MAAMC,SACJ,wBAAIzB,UAAU,MAAd,6BAIR4B,KAAKX,MAAMK,a,GAzBMQ,IAAMC,WCwElBC,E,YAhEX,aAAc,IAAD,8BACT,+CAYLC,eAAe,SAACC,GAEZ,EAAKL,SAAS,CAAClB,YAAYuB,EAAMC,OAAOC,SAXxC,EAAKZ,MAAM,CACRpB,OAAQ,GAERO,YAAa,IAPN,E,iFAoBM,IAAD,OAElB0B,MAAM,8CACJC,MAAK,SAAAC,GACL,OAAOA,EAASC,UACdF,MAAK,SAAAG,GAAQ,EAAKZ,SAAS,CAACzB,OAAOqC,S,+BAI/B,MAEuBb,KAAKJ,MAA3BpB,EAFD,EAECA,OAAOO,EAFR,EAEQA,YAGP+B,EAAatC,EAAOuC,QAAO,SAACC,GACjC,OAAOA,EAAM/C,KAAKgD,cAAcC,SAASnC,EAAYkC,kBAItD,OAAmB,IAAhBzC,EAAO2C,OACC,wBAAI/C,UAAU,MAAd,cAIN,yBAAKA,UAAU,MACZ,wBAAIA,UAAU,KAAd,eACA,kBAAC,EAAD,CAAWY,aAAcgB,KAAKK,iBAG9B,kBAAC,EAAD,KAEI,kBAAC,EAAD,KAEG,kBAAC,EAAD,CAAU7B,OAAQsC,W,GAvDtBZ,IAAMC,WCQxBiB,IAASC,OAAQ,kBAAC,EAAD,MAAQC,SAASC,eAAe,SPmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAA/B,GACLgC,QAAQhC,MAAMA,EAAMiC,a","file":"static/js/main.3d60f997.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// create our react component:\r\n//import what we need:\r\nimport React from 'react';\r\n\r\n\r\n//create a class/or function(in this case):\r\n//add a parameter to allow use an object properties(props.name,props.email...) to create dynamic component\r\n    //use destructuring to grab object properties(argument variables):\r\nconst Card = ({ name,email,id }) => {\r\n    \r\n    //this class contain a render() method that return the component content:\r\n      return(\r\n        //jsx syntax  \r\n        <div className='bg-light-yellow dib br3 pa3 ma2 grow bw2 shadow-5 tc'>\r\n\r\n            {/* use template strings to automatically set robot by id */}\r\n            <img alt=\"robots\" src={`https://robohash.org/${id}?200x200`}></img>\r\n            <div>\r\n\r\n            {/* props is a javascript object and we need {} to recognize in jsx syntax */}\r\n            <h2>{name}</h2>\r\n            <p>{email}</p>\r\n            </div>\r\n        </div>\r\n      );  \r\n    \r\n}\r\n\r\nexport default Card;","//parent component\r\nimport React from 'react';\r\n//we need Card component properties to set here\r\nimport Card from '../Components/Card';\r\n                   \r\n        //destructuring(the best way) this argument is an array;\r\nconst CardList=({robots})=>{\r\n\r\n    //create a new array(cardComponent) by mapping robots array:\r\n    const cardArray=robots.map((user,index)=>{\r\n      //return multiple components:(each child needs a key (for each position))\r\n      return  (\r\n         <Card\r\n            key={index}\r\n            id={robots[index].id}\r\n            name={robots[index].name}\r\n            email={robots[index].email} \r\n         />);\r\n    });\r\n\r\n    return(\r\n        <div> \r\n            {cardArray}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\n//pure component->prop(searchChange) destructuring from app->parameter\r\nconst SearchBox=({searchField, searchChange})=>{\r\n    return(\r\n     <div className=\"tc \">\r\n\r\n       <input \r\n         className='pa3 ba b--green bg-lightest-white'\r\n         type='search'\r\n         placeholder='search robots'\r\n         onChange={searchChange}\r\n       />\r\n       {/*every time the onChange event is triggered call the searchChange function that is geven as a parameter*/}\r\n\r\n     </div>\r\n\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll=(props)=>{\r\n   \r\n    return(  \r\n        //add some properties:\r\n        //overflow->css property that makes a scroll bar\r\n       <div style={{overflowY:'scroll', border:'1px solid black',height:'900px'}}>\r\n           {props.children}\r\n       </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React from 'react'\r\n\r\nclass ErrorBoundry extends React.Component{\r\n    //this properties is given from app component:\r\n    //<ErrorBoundry> --this is a component\r\n    //  <CardsList/> in this case represents the props(and is given as a parameter) --this is a component parameter\r\n    //</ErrorBoundry>\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state={\r\n         hasError:false\r\n        };\r\n    }\r\n\r\n    //special lifecycle React function similar with try-catch block\r\n    componentDidCatch(error ,info){\r\n     this.setState({hasError:true});\r\n    }\r\n    \r\n    render(){\r\n        //if an error has occured will render(return) a component message\r\n        if(this.state.hasError){\r\n          return  <h1 className=\"tc\">That's something not good</h1>\r\n        }\r\n      //else return props children(in this case <CardsList/> component that show all Cards components)  \r\n      return(\r\n          this.props.children                                                                           \r\n      );\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React from 'react';\r\n//import all we need cardList and robots array:\r\nimport Cardlist from '../Components/CardList';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport './App.css';\r\nimport Scroll from '../Components/Scroll';\r\nimport ErrorBoundry from '../Components/ErrorBoundry';\r\n\r\nclass App extends React.Component{\r\n    //add(define) state by a class constructor:\r\n    constructor(){\r\n        super();\r\n        //this object have 2 properties robots-array and searchfield(initialize part)\r\n        // (this.setState=App.setState are the same thing)\r\n       this.state={\r\n          robots: [],\r\n          //declared empty\r\n          searchField: ''\r\n        }\r\n        \r\n    }\r\n\r\n   //this function run when onChange event from input is triggered(in searchBox component)\r\n   onSearchChange=(event)=>{\r\n       //modify the state with everything we type in searchbox:(this.setState=App.setState are the same thing)\r\n       this.setState({searchField:event.target.value}) \r\n\r\n   }\r\n \r\n   //this method is part from React(has own standard name) this is invoked after a component si mounted\r\n   componentDidMount(){\r\n    //fetch function is used to grab data by sending a request to the server   \r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n     .then(response=>{\r\n      return response.json();\r\n     }).then(users=>{this.setState({robots:users})});//setState will modify/update current state with obtained data\r\n \r\n   }\r\n\r\n    render(){\r\n       //destructuring the object: \r\n       const{robots,searchField} = this.state;\r\n       \r\n       //filter the search (this.state.robots->access the robots array) we manage state here:\r\n       const filterRobots=robots.filter((robot)=>{\r\n        return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n       });\r\n \r\n       //use robots instead this.state.robots\r\n       if(robots.length===0){\r\n           return <h1 className=\"tc\">Loading...</h1>\r\n       }\r\n       else{\r\n        return(\r\n            <div className='tc'>\r\n               <h1 className=\" \">Robofriends</h1>   \r\n               <SearchBox searchChange={this.onSearchChange}/>\r\n               {/* Cards list state form robots is pass down as props (cardlist robots will be filtered) */} \r\n               {/* create Scroll component */}\r\n               <Scroll>\r\n                   {/*Scroll component children*/}\r\n                   <ErrorBoundry>\r\n                      {/*ErrorBoundry component children*/}\r\n                      <Cardlist robots={filterRobots}/>\r\n                   </ErrorBoundry>  \r\n               </Scroll>\r\n            </div>\r\n             \r\n         );\r\n       }\r\n    }\r\n}\r\n\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n//for undefault(multiple) exporting he need destructuring({variableName})\nimport {robots} from './robots.js';\n//import Cardlist parent //default(single) export\nimport App from './Containers/App';\n\n\n//this thing is what react does\n// create a component called Card:\n    //this Card object data properties(id,name,email) will be passed in props variable our react Card component(Card.js)\n    //<Cardlist robots={robots}/> Cardlist extract robots array\nReactDOM.render( <App/>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}